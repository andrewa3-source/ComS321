B fill

fill:
//X0 = a[]
//X1 = n
//X2 = i
//X3 = i * 8
//X4 = n - i - 1

ADDI X1, X1, #11 //Set n for fill and find_index

CBZ X1, end_fill //If n=0 just do nothing

top_of_fill_loop:
ADD X3, X0, X3  // a[i]
LSL X3, X2, #3  //Shift i
SUB X4, X1, X2  //n - i
SUBI X4, X4, #1  // n - i - 1
STUR X4, [X3, #0]  // store X4 in a[i]
ADDI X2, X2, #1    // i++
SUBS XZR, X2, X1   // set flag for i < n
B.GE end_fill
B top_of_fill_loop

end_fill:
ADD X1, XZR, XZR
ADD X2, XZR, XZR
ADD X3, XZR, XZR
ADD X4, XZR, XZR

ADDI X1, XZR, #0    //set start
ADDI X2, XZR, #10   //set end
ADDI X3, XZR, #9    //set value
B binary_search 


binary_search:
//X0 = a*
//X1 = start
//X2 = end
//X3 = value
//X9 = index
//X10 = start + end
//X11 = a[index]
//X12 = a[index] - value | Should be 0 if equvivilent 

SUBS XZR, X2, X1   //if end < start
B.LT return_failure 

ADD X10, X1, X2    //start + end

LSR X9, X10, #1    //Divide by 2 by shifting right once

ADD X11, X0, X9  // a[index]

SUB X12, X11, X3     // a[index] - value
CBZ X12, return_binary_search   // a[index] - value = 0 meaning they are equivilent and index is found

SUBS XZR, X11, X3   // a[index] > value
B.GT minus_one

B plus_one

minus_one:
SUBI X2, X9, #1    //end = index - 1
B binary_search

plus_one:
ADDI X1, X9, #1    //start = index + 1
B binary_search

return_failure:
ADDI X0, XZR, #-1 

return_binary_search:
PRNT X9
