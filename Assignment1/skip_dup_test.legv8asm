B fill

fill:
//X0 = a[]
//X1 = n
//X2 = i
//X3 = i * 8
//X4 = n - i - 1

ADDI X1, X1, #7 //Set n for fill and find_index

CBZ X1, end_fill //If n=0 just do nothing

top_of_fill_loop:
ADD X3, X0, X3  // a[i]
LSL X3, X2, #3  //Shift i
SUB X4, X1, X2  //n - i
SUBI X4, X4, #1  // n - i - 1
STUR X4, [X3, #0]  // store X4 in a[i]
ADDI X2, X2, #1    // i++
SUBS XZR, X2, X1   // set flag for i < n
B.GE end_fill
B top_of_fill_loop

end_fill:
ADD X2, XZR, XZR
ADD X3, XZR, XZR
ADD X4, XZR, XZR
B skip_duplicates

skip_duplicates:
//X0 = a[]
//X1 = start
//X2 = value
//X10 = index
ADDI X1, XZR, #1 //for test, setting starting index to 1
ADDI X2, XZR, #5 //for test, setting value to 5

ADD X10, XZR, X1 // index = start
ADD X13, XZR, X2 // X13 = value

top_of_skip_dup:
LSL X11, X10, #3 //convert index to offset
ADD X11, X0, X11 //$a[index]
LDUR X12, [X11, #0] //X12 = a[index]

//for test
PRNT X13
PRNT X12

SUBS X14, X13, X12  //value - a[index]
CBNZ X14, found_index //if not equal, then branch to found index

ADDI X10, X10, #1 //index++
B top_of_skip_dup


found_index:
PRNT X10 
ADD X1, XZR, XZR
ADD X2, XZR, XZR